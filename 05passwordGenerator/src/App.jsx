import { useState, useCallback, useEffect, useRef } from 'react'


function App() {
  const [length, setLength] = useState(8) // for the length slider
  const [numberAllowed, setNumberAllowed] = useState(false) // for the Number checkbox (toggle-like functionality)
  const [charAllowed, setCharAllowed] = useState(false) // for the Char checkbox (toggle functionality)

  const [password, setPassword] = useState('') // this state helps track the read-only generated password
  /*
    For default value of password we may give some value, but purpose is to generate a password. However, this is a different
    mechanism that when the page loads, then automatically some functionality loads, api gets called or some method runs and
    then from there we'll fit the data inside the password state, and when the page loads, then it loads in the UI, hence
    some password is already in the input field, when the page loads. 
  */

  // useRef hook (to use it, have to make a variable)
  // initially, it has no ref, so user ref{} inside the input element to give it the ref
  const passwordRef = useRef(null);

  // Password generator method (usecallback hook ensures memoization i.e. usage of cache (refer docs))
  const passwordGenerator = useCallback(() => {
    let pass = "" // empty string (will contain the generated password, then setPassword method will set it in the password state)
    let str = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"  // contains the data using which our password will be generated

    if (numberAllowed) str += "0123456789" // means now our password can have numbers also
    if (charAllowed) str += "!@#$%^&*-_+=[]{}~`"

    // Now, just make a password picking out random characters from the formed string str based on user preference
    // We can pick out random char form str using loop (and how many times loop will run will be governed by length state)

    for (let i = 1; i <= length; i++) {
      let char = Math.floor(Math.random() * str.length + 1) // generates a random idx in the str, use it to obtain the random char
      pass += str.charAt(char)
    }

    setPassword(pass) // password state has been updated

  }, [length, numberAllowed, charAllowed])

  const copyPasswordToClipboard = useCallback(() => {
    // since we're working on core react, so we have window object directly available
    // (b/z ultimately rect will compile into js, and in the environment we have window)
    // however, in nextJS, we have server-side rendering, all the code executes on the server
    // where we don't have the window object

    // when copying, the text copied should be highlighted, for that we use useRef
    passwordRef.current?.select()
    passwordRef.current?.setSelectionRange(0, 101)
    window.navigator.clipboard.writeText(password)
  }, [password])

  // no need to store in var like useCallBack(), takes 2 args: callback and dependency array
  useEffect(() => {
    passwordGenerator() // now, when the page loads, some password is generated by default, i.e. passwordGenerator() is called
  }, [length, numberAllowed, charAllowed, passwordGenerator])

  return (
    <>
      <div className='w-full max-w-md mx-auto shadow-md rounded-lg px-4 py-3 my-8 text-orange-500 bg-gray-800'>
        <h1 className="text-white text-center my-3">Password generator</h1>
        <div className='flex shadow rounded-lg overflow-hidden mb-4'>
          <input
            type="text"
            value={password}
            className='outline-none w-full py-1 px-3'
            placeholder='password'
            readOnly
            ref={passwordRef}
          />
          <button
            onClick={copyPasswordToClipboard}
            className='outline-none bg-blue-700 text-white px-3 py-0.5 shrink-0'
          >copy</button>
        </div>

        <div className="flex text-sm gap-x-2">
          <div className="flex items-center gap-x-1">
            <input
              type="range"
              min={6}
              max={100}
              value={length} // this is just the intial value, no use during onChange or setter function
              className='cursor-pointer'
              onChange={(e) => { setLength(e.target.value) }}
            />
            <label>Length: {length} </label>
          </div>

          <div className="flex items-center gap-x-1">
            <input
              type="checkbox"
              defaultChecked={numberAllowed} // only holds the initial state, so use checked attribute instead
              id="numberInput"
              onChange={() => {
                setNumberAllowed((prev) => !prev) // safest practice
                // setNumberAllowed(e.target.checked)
                // setNumberAllowed(!numberAllowed)
              }}
            />
            <label htmlFor="numberInput">Numbers</label>
          </div>

          <div className="flex items-center gap-x-1">
            <input
              type="checkbox"
              defaultChecked={charAllowed} // only holds the initial state, so use checked attribute instead
              id="characterInput"
              onChange={() => {
                setCharAllowed((prev) => !prev) // safest practice
                // setNumberAllowed(e.target.checked)
                // setNumberAllowed(!numberAllowed)
              }}
            />
            <label htmlFor="characterInput">Characters</label>
          </div>

        </div>


        {/* <div className='relative inset-x-0 flex justify-center'>
          <button
            className='bg-blue-600 text-white px-4 py-2 rounded mt-4'
            onClick={ () => {passwordGenerator()} }
          >
            Generate
          </button>
        </div> */}
      </div>

    </>
  )

}
export default App
